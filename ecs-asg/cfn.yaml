Parameters:
  MyKeyPairName:
    Type: String
  MyImageId:
    Type: String
  ExportVpcStackName:
    Type: String
  InstanceType:
    # Default: 't3.large'
    Type: String
#   VpcId:
#     Type: AWS::EC2::VPC::Id
#   SubnetId:
#     Type: 'List<AWS::EC2::Subnet::Id>'
  SSHLocation:
   Description: The IP address range that can be used to SSH to the EC2 instances
   Type: String
  EnvironmentName:
    Type: String
    # Default: dev
  Application:
    Type: String
    # Default: App
    Description: Define the application name

Resources:
  AsgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        CreditSpecification:
          CpuCredits: Unlimited
        ImageId: !Ref MyImageId
        IamInstanceProfile:
          Arn: !GetAtt
            - EC2InstanceProfile
            - Arn
        InstanceType: !Ref InstanceType
        KeyName: !Ref MyKeyPairName
        Monitoring:
          Enabled: True
        SecurityGroupIds:
            - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
        UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash
            mkdir /etc/ecs
            echo "ECS_CLUSTER=spring" >> /etc/ecs/ecs.config
          - {
            }
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${EnvironmentName}-AsgLaunchTemplate-${Application}"
  ApplicationAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ApplicationAsg
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 100
      LaunchTemplate:
        LaunchTemplateId: !Ref AsgLaunchTemplate
        Version: !GetAtt AsgLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
           - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
           - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2
      TargetGroupARNs: 
           - Fn::ImportValue: 
              !Sub ${ExportVpcStackName}-TargetGroup
      # Tags:
      #   - Key: Name
      #     Value: my-asg-group

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2InstanceProfile
      Path: /
      Roles: [!Ref 'EC2Role']
      # Tags:
      #   - Key: Name
      #     Value: instanceprofile

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-EC2Role-${Application}"
